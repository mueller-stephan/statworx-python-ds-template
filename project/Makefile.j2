#################################################################################
# GLOBALS                                                                       #
#################################################################################
ENVNAME := .venv
VENV := $(ENVNAME)/bin

PROJECT_NAME = {{ package_name }}
PYTHON_INTERPRETER = $(VENV)/python

#################################################################################
# COMMANDS                                                                      #
#################################################################################

{%- if orchestrator == 'kedro' %}

.PHONY: run_local
run_local:
	$(PYTHON_INTERPRETER) -m kedro run --env local

.PHONY: run_prod
run_prod:
	$(PYTHON_INTERPRETER) -m kedro run --env prod

.PHONY: mlflow
mlflow:
	$(PYTHON_INTERPRETER) -m kedro mlflow ui

.PHONY: viz
viz:
	$(PYTHON_INTERPRETER) -m kedro viz

{%- endif %}
{%- if orchestrator == 'hydra' %}

.PHONY: run_prod
run_prod:
	$(PYTHON_INTERPRETER) -m kedro run --env prod

{%- endif %}
.PHONY: clean
clean:
	find . -type f -name "*.py[co]" -delete
	find . -type d -name "__pycache__" -delete

	rm -rf data/02_intermediate/*
	rm -rf data/03_primary/*
	rm -rf data/04_feature/*
	rm -rf data/05_model_input/*
	rm -rf data/06_model/*
	rm -rf data/07_model_output/*
	rm -rf data/08_reporting/*

.PHONY: test
test:
	$(PYTHON_INTERPRETER) -m pytest src/tests

.PHONY: check-code-quality
check-code-quality:
	$(VENV)/pre-commit run --all-files
{%- if documentation == 'mkdocs' %}

.PHONY: documentation
documentation:
	$(PYTHON_INTERPRETER) -m mkdocs serve

.PHONY: build_documentation
build_documentation:
	$(PYTHON_INTERPRETER) -m mkdocs build

{%- endif %}
{%- if documentation == 'sphinx' %}

.PHONY: build_html_docs
build_html_docs: generate_api_documentation
	$(VENV)/sphinx-build -M html ./docs ./docs/build

.PHONY: build_pdf_docs
build_pdf_docs: generate_api_documentation
	$(VENV)/sphinx-build -M latexpdf ./docs ./docs/build

.PHONY: generate_api_documentation
generate_api_documentation:
	$(VENV)/sphinx-apidoc -o docs/source/code ./src/$(PROJECT_NAME)

{%- endif %}
#################################################################################
# SETUP
#################################################################################

.PHONY: install
install: install_tools install_dependencies install_precommit {% if use_jupyterlab %}install_kernel{% endif %}
	{% if use_direnv == true %}direnv allow{% endif %}

.PHONY: install_dependencies
install_dependencies: install_tools
	poetry config virtualenvs.in-project true
	poetry env use $$(pyenv prefix {{ python_version }})/bin/python
	poetry install

.PHONY: install_precommit
install_precommit:
	git init -q
	$(VENV)/pre-commit install

.PHONY: install_tools
install_tools:
	@sh ./scripts/install_dependencies.sh
{%- if use_jupyterlab %}

.PHONY: install_kernel
install_kernel:
	$(VENV)/python -m ipykernel install --user --name $(PROJECT_NAME)
{%- endif %}